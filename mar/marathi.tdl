;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Marathi
;;; created at:
;;;     Wed Feb 05 01:06:22 UTC 2014
;;; based on Matrix customization system version of:
;;;     Fri Jan 31 10:06:37 UTC 2014
;;;
;;; Marathi by Rajeshwari Pandharipande and Native Speaker (Author)
;;; Created by Antariksh Bothale and Andrew Baer
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

head :+ [ AUX bool,
	  FORM form,
	  H-INIT bool,
	  C-INIT bool].

inflected :+ [ 
    ADJECTIVE_INFLECTION-FLAG luk,
    TOBECOME_AUX_INFLECTION-FLAG luk,
    VERB_TENSE_ASPECT-FLAG luk,
    VERB_GENDER_PERNUM-FLAG luk,
    PRESENT_LEXICAL_RULE-FLAG luk,
    IRREG_INTRANS_VERB_TENSE-FLAG luk,
    FUTURE_LEXICAL_RULE-FLAG luk,
    PAST_LEXICAL_RULE-FLAG luk,
    PLURAL-OBLIQUE-FLAG luk,
    CASE-FLAG luk,
    TOBE_AUX_INFLECTION-FLAG luk ].

infl-satisfied :+ [ 
    ADJECTIVE_INFLECTION-FLAG na-or-+,
    TOBECOME_AUX_INFLECTION-FLAG na-or-+,
    VERB_TENSE_ASPECT-FLAG na-or-+,
    VERB_GENDER_PERNUM-FLAG na-or-+,
    PRESENT_LEXICAL_RULE-FLAG na-or-+,
    IRREG_INTRANS_VERB_TENSE-FLAG na-or-+,
    FUTURE_LEXICAL_RULE-FLAG na-or-+,
    PAST_LEXICAL_RULE-FLAG na-or-+,
    PLURAL-OBLIQUE-FLAG na-or-+,
    CASE-FLAG na-or-+,
    TOBE_AUX_INFLECTION-FLAG na-or-+ ].

png :+ [ PERNUM pernum,
    GEND gender ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
erg+nom := case.
non-nom := case.
abs := non-nom.  ; abs
ins := non-nom.  ; inst
abl := non-nom.  ; abl
pos := non-nom.  ; poss
loc := non-nom.  ; loc
voc := non-nom.  ; voc
erg := non-nom & erg+nom.
nom+acc+dat := case.
acc+dat := nom+acc+dat.
nom := nom+acc+dat & erg+nom.
acc := non-nom & acc+dat.
dat := non-nom & acc+dat.

;;; Pernum

pernum := *top*.
SG := pernum.
PL := pernum.
1st := pernum.
3rd := pernum.
1SG := 1st & SG.
2SG := 2nd & SG.
3SG := 3rd & SG.
1PL := 1st & PL.
1PL_incl := 1PL.
1PL_excl := 1PL.
2PL := 2nd & PL.
3PL := 3rd & PL & 2nd+3PL.
2nd+3PL := pernum.
2nd := 2nd+3PL.

;;; Gender

gender := *top*.
M := gender.
F := gender.
N := gender.

;;; Form

form := *top*.
nonfinite := form.
finite := form.
infinitive := nonfinite.
able-perm := nonfinite.
neg-form := nonfinite.
;finiteneg := finite & neg-form.
;nonfiniteneg := nonfinite & neg-form.
;;; Tense

past := tense.
present := tense.
future := tense.

;;; Aspect

perfective := aspect.
imperfective := aspect.

;;; Demonstratives

demonstrative_a_rel := predsort.
proximal+dem_a_rel := demonstrative_a_rel. ; close to speaker
distal+dem_a_rel := demonstrative_a_rel.   ; away from speaker

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr >].

infl-unsatisfied-noun-lex := noun-lex & 
  [ INFLECTED.CASE-FLAG - ].

infl-satisfied-noun-lex := noun-lex & 
  [ INFLECTED.CASE-FLAG + ].

obl-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT - ] > ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].


locative-pp-phrase := unary-phrase &
  [ SYNSEM [LOCAL.CAT [ HEAD adp & [MOD <[ LOCAL.CAT [HEAD verb, 
						      VAL.SUBJ cons ]] >],
			POSTHEAD -,
			VAL [ COMPS < >,
			      SUBJ < >, 
			      SPR < > ] ]],
    
    C-CONT [ HOOK [ LTOP #ltop,
		    INDEX #index,
		    XARG #xarg ],
	     RELS <! arg12-ev-relation &
		   [ PRED "_loc_p_rel",
		     LBL #ltop,
		     ARG0 #index,
		     ARG1 #xarg,
		     ARG2 #dtr ] !>,
	     HCONS <! !>  ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ HEAD noun & [CASE loc],
				  VAL.SPR < > ],
			    CONT.HOOK [ INDEX #dtr ]]] > ].


possessive-det-phrase := unary-phrase &
  [ SYNSEM [LOCAL [CAT [ HEAD det & [ MOD < > ],
			 VAL [COMPS < >,
			      SUBJ < >,
			      SPEC [ FIRST [ LOCAL [CAT [ HEAD noun ],
						    CONT.HOOK [ INDEX #possessee & [COG-ST uniq-or-more ], LTOP #larg ]]]]]]]],

    ARGS  < [ SYNSEM.LOCAL [ CAT [ HEAD noun & [CASE pos],
				   VAL.SPR < > ],
			     CONT [ HOOK [ INDEX #possessor ]]]] >,
    C-CONT [ HOOK [ LTOP #larg,
		    INDEX #possessee ],	     
	     RELS <! 
		   quant-relation & 
		   [ PRED "exist_q_rel",
		     ARG0 #possessee,
		     RSTR #harg ],
		   arg12-ev-relation & 
		   [ PRED "_poss_rel",
		     LBL #larg,		     
		     ARG1 #possessee,
		     ARG2 #possessor ] !>,
	     HCONS <! qeq & [ HARG #harg,
			      LARG #larg ] !> ]].


		   

;    ARGS < [ SYNSEM.LOCAL [ CAT [ HEAD noun & [CASE pos],
;				  VAL.SPR < > ]]]> ].
;			 VAL [SPEC < [ LOCAL.CAT.HEAD noun ] >]]]],


;			 VAL.SPEC < [ LOCAL [ CAT [HEAD noun ],
;						  ;CONT.HOOK [INDEX.COG-ST uniq-or-more, LTOP #ltop],
;						  VAL [ COMPS < >,
;							SUBJ < >, 
;							SPR < > ]]]>]]],    

;    C-CONT [ HOOK [ LTOP #ltop,
;		    INDEX #index,
;		    XARG #xarg ],	     	     
;	     RELS <! arg12-ev-relation &
;		   [ PRED "_poss_q_rel",
;		     LBL #ltop,
;		     ARG0 #index,
;		     ARG1 #xarg,
;		     ARG2 #dtr ] !>,
;	     HCONS <! !>  ],    

anim_noun_lexeme-noun-lex := infl-unsatisfied-noun-lex.

inanim_noun_lexeme-noun-lex := infl-unsatisfied-noun-lex.

pronoun_lexeme-noun-lex := no-spr-noun-lex & 
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX [COG-ST activ-or-more, SPECI + ] ].

nom_pronoun_lexeme-noun-lex := pronoun_lexeme-noun-lex & 
  [ SYNSEM.LOCAL.CAT.HEAD.CASE erg+nom,
    INFLECTED.CASE-FLAG + ].

acc_dat_pronoun_lexeme-noun-lex := pronoun_lexeme-noun-lex & 
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc+dat,
    INFLECTED.CASE-FLAG + ].

1st_pronoun_lexeme-noun-lex := nom_pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1SG ].

1st_acc_dat_pronoun_lexeme-noun-lex := acc_dat_pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1SG ].

1pl_pronoun_lexeme-noun-lex := nom_pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL ].

1plincl_pronoun_lexeme-noun-lex := nom_pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL_incl ].

2sg_pronoun_lexeme-noun-lex := nom_pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2SG ].

2pl_pronoun_lexeme-noun-lex := nom_pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ].

2plh_pronoun_lexeme-noun-lex := nom_pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ].

;;; active_status_pronoun_lexeme := nom_pronoun_lexeme-noun-lex & 
;;;  [ SYNSEM.LOCAL.CONT.HOOK.INDEX [COG-ST activ-or-more, SPECI + ]].

3sgm_pronoun_lexeme-noun-lex := nom_pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GEND M,
                                       PERNUM 3SG ] ].

3sgf_pronoun_lexeme-noun-lex := nom_pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3SG,
                                       GEND F ] ].

3plm_pronoun_lexeme-noun-lex := nom_pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3PL,
                                       GEND M ] ].

3plf_pronoun_lexeme-noun-lex := nom_pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3PL,
                                       GEND F ] ].

3sgn_pronoun_lexeme-noun-lex := nom_pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3SG,
                                       GEND N ] ].

3pln_pronoun_lexeme-noun-lex := nom_pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3PL,
                                       GEND N ] ].

malenounsg_anim_noun-lex := anim_noun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [GEND M, PERNUM 3SG]].

malenounsg_inam_noun-lex := inanim_noun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [GEND M, PERNUM 3SG]].

femnounsg_anim_noun-lex := anim_noun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [GEND F, PERNUM 3SG]].

femnounsg_inam_noun-lex := inanim_noun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [GEND F, PERNUM 3SG]].

male_proper_noun_lexeme-noun-lex := anim_noun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [GEND M, PERNUM 3SG]].

female_proper_noun_lexeme-noun-lex := anim_noun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [GEND F, PERNUM 3SG]].

neutersg_anim_noun-lex := anim_noun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [GEND N, PERNUM 3SG]].

neutersg_inam_noun-lex := inanim_noun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [GEND N, PERNUM 3SG]].

neuterpl_anim_noun-lex := anim_noun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [GEND N, PERNUM 3PL]].

neuterpl_inam_noun-lex := inanim_noun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [GEND N, PERNUM 3PL]].


;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD verb,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE erg+nom, 
    INFLECTED [ PAST_LEXICAL_RULE-FLAG na-or--,
                PRESENT_LEXICAL_RULE-FLAG na-or--,
                FUTURE_LEXICAL_RULE-FLAG na-or-- ] ].

preinflected-verb-super-type := word-or-lexrule & 
  [ INFLECTED [ VERB_TENSE_ASPECT-FLAG +,
                VERB_GENDER_PERNUM-FLAG + ]  ].

tobeinflected-verb-super-type := word-or-lexrule & 
  [ INFLECTED [ VERB_TENSE_ASPECT-FLAG -,
                VERB_GENDER_PERNUM-FLAG - ]  ].

non-copula-main-verb-lex := verb-lex & tobeinflected-verb-super-type & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ]].

copula-main-verb-lex := verb-lex & preinflected-verb-super-type & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ]].




copula-verb-lex-supertype := preinflected-verb-super-type & non-mod-lex-item & 
  [ SYNSEM.LOCAL.CAT [ HEAD verb,
		       VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom ]] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

;preinflected-aux-lex := aux-lex & preinflected-verb-super-rule.

copula-transitive-verb-lex := copula-main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].


intransitive-verb-lex := non-copula-main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := non-copula-main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

trans_verb_lxm-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE erg+nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE nom+acc+dat ] ].

dat_arg_trans_verb_lxm-verb-lex := trans_verb_lxm-verb-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE dat ].

acc_arg_trans_verb_lxm-verb-lex := trans_verb_lxm-verb-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc ].


intrans_verb_lxm-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom ].

irreg_trans_verb1-verb-lex := trans_verb_lxm-verb-lex &
  [ INFLECTED.IRREG_INTRANS_VERB_TENSE-FLAG - ].

embedded_clause_inviting_verb-lex := non-copula-main-verb-lex & clausal-second-arg-trans-lex-item &
  [ ARG-ST < synsem, #arg >,
    SYNSEM.LOCAL.CAT.VAL [ SPR < >,
			   COMPS < #arg & 
				   [ LOCAL [ CAT [ HEAD comp,
						   VAL [ SPR < >,
							 COMPS < > ],
						   MC -],
					     CONT.HOOK.INDEX.SF prop-or-ques]] >,
			   SUBJ.FIRST.LOCAL.CAT.HEAD.CASE erg+nom ]].

emb-d-inviting_verb-lex := embedded_clause_inviting_verb-lex & 
  [SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX.SF prop] > ].
			
emb-q-inviting_verb-lex := embedded_clause_inviting_verb-lex & 
  [SYNSEM.LOCAL.CAT.VAL.COMPS < [ LOCAL.CONT.HOOK.INDEX.SF ques] > ].			

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < [ ] >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb &
                                [ AUX - ] ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

ability-permission-verb-lex := subj-raise-aux-with-pred & tobeinflected-verb-super-type & 
[ SYNSEM.LOCAL [ CAT [VAL [ SPR < >,
                             SPEC < >,
                             COMPS < [ LOCAL.CAT.HEAD.FORM able-perm,
				       OPT - ] >,
                             SUBJ < [ LOCAL.CAT.HEAD.CASE nom ] > ],
		      HEAD.H-INIT - ]],
  INFLECTED [ VERB_TENSE_ASPECT-FLAG -,
                VERB_GENDER_PERNUM-FLAG - ]].


copula-verb-lex := copula-verb-lex-supertype & trans-first-arg-raising-lex-item-2 &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj >,
                             COMPS < #comps >,
                             SPR < >,
                             SPEC < > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CONT.HOOK.INDEX #xarg,
                       CAT [ VAL [ SPR < >, 
                                   COMPS < > ],
                             HEAD noun ] ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ COMPS < > ],
                           HEAD +jp ] ] > ].

neg-copula-verb-lex := copula-verb-lex.

present-verb-lex := word-or-lexrule & 
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE present ].

past-verb-lex := word-or-lexrule & 
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

future-verb-lex := word-or-lexrule & 
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE future ].


3sm_present_copula-verb-lex := copula-verb-lex & present-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3sg ].

3pm_present_copula-verb-lex := copula-verb-lex & present-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl ].

3sm_past_copula-verb-lex := copula-verb-lex & past-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3sg ].

3pm_past_copula-verb-lex := copula-verb-lex & past-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl ].

noun-copula-verb-lex := copula-transitive-verb-lex & 
  [ SYNSEM.LOCAL [CAT.VAL [COMPS.FIRST.LOCAL.CAT.HEAD.CASE nom,
			  SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom ]]].

3sm_present_noun-copula-verb-lex := noun-copula-verb-lex & present-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3sg ].

3pm_present_noun-copula-verb-lex := noun-copula-verb-lex & present-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl ].

3pm_past_noun-copula-verb-lex := noun-copula-verb-lex & past-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3pl ].

3sm_past_noun-copula-verb-lex := noun-copula-verb-lex & past-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3sg ].

neg-aux-lex := subj-raise-aux-with-pred & preinflected-verb-super-type &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM neg-form,
    SYNSEM.LOCAL.CAT [VAL [COMPS.FIRST [LOCAL.CAT.VAL.SUBJ #spec, 
					OPT -],
			  SUBJ #spec],
		      HEAD.H-INIT - ]].

sg_neg-aux-lex := neg-aux-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM sg ].

pl_neg-aux-lex := neg-aux-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM pl ].

tobe_aux_verb_lexeme-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite,
    INFLECTED.TOBE_AUX_INFLECTION-FLAG - ].

tobecome_aux_verb_lexeme-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite,
    INFLECTED.TOBECOME_AUX_INFLECTION-FLAG - ].

;;; Others


;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

;;;determiner-lex := basic-determiner-lex & basic-zero-arg & non-mod-lex-item &
;;;  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
;;;                           COMPS < >,
;;;                           SUBJ < > ] ].

;;;determiner_lxm-determiner-lex := determiner-lex & no-icons-lex-item &
;;;  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.GEND M ].

dem_determiner-lex := determiner-lex-supertype & non-mod-lex-item &
  [SYNSEM [LOCAL [CONT [RELS <! [ PRED "exist_q_rel" ],
		 #altkeyrel & arg1-ev-relation & [LBL #ltop, ARG1 #index]  !> ],
   CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK [INDEX [COG-ST activ+fam], LTOP #ltop, INDEX #index]], LKEYS.ALTKEYREL #altkeyrel ]].

nom_dem_determiner-lex := dem_determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE nom ].

non_nom_dem_determiner-lex := dem_determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CAT.HEAD.CASE non-nom ].


prox_dem_determiner-lex := dem_determiner-lex & 
  [ SYNSEM.LKEYS.ALTKEYREL.PRED proximal+dem_a_rel ].

dist_dem_determiner-lex := dem_determiner-lex & 
  [ SYNSEM.LKEYS.ALTKEYREL.PRED distal+dem_a_rel ].

prox_nom_dem_determiner-lex := nom_dem_determiner-lex & prox_dem_determiner-lex.

dist_nom_dem_determiner-lex := nom_dem_determiner-lex & dist_dem_determiner-lex.  

prox_non_nom_dem_determiner-lex := non_nom_dem_determiner-lex & prox_dem_determiner-lex.

dist_non_nom_dem_determiner-lex := non_nom_dem_determiner-lex & dist_dem_determiner-lex.  

male_sg_dist_dem_determiner-lex := dist_nom_dem_determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [GEND M, PERNUM SG] ].

male_pl_dist_dem_determiner-lex := dist_nom_dem_determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [GEND M, PERNUM PL] ].

fem_sg_dist_dem_determiner-lex := dist_nom_dem_determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [GEND F, PERNUM SG] ].

fem_pl_dist_dem_determiner-lex := dist_nom_dem_determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [GEND F, PERNUM PL] ].

neutral_sg_dist_dem_determiner-lex := dist_nom_dem_determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [GEND N, PERNUM SG] ].

neutral_pl_dist_dem_determiner-lex := dist_nom_dem_determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [GEND N, PERNUM PL] ].

male_sg_prox_dem_determiner-lex := prox_nom_dem_determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [GEND M, PERNUM SG] ].

male_pl_prox_dem_determiner-lex := prox_nom_dem_determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [GEND M, PERNUM PL] ].

fem_sg_prox_dem_determiner-lex := prox_nom_dem_determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [GEND F, PERNUM SG] ].

fem_pl_prox_dem_determiner-lex := prox_nom_dem_determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [GEND F, PERNUM PL] ].

neutral_sg_prox_dem_determiner-lex := prox_nom_dem_determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [GEND N, PERNUM SG] ].

neutral_pl_prox_dem_determiner-lex := prox_nom_dem_determiner-lex & 
  [ SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [GEND N, PERNUM PL] ].



infostr-marking-mod-lex := no-rels-hcons-lex-item & one-icons-lex-item &
  [ SYNSEM.LOCAL [ CAT [ HEAD adv &
                              [ MOD < [ LIGHT -,
                                        LOCAL.CONT.HOOK [ INDEX #target,
                                                          ICONS-KEY #icons ] ] > ],
                         VAL [ SUBJ < >,
                               COMPS < >,
                               SPR < >,
                               SPEC < > ] ],
                   CONT.ICONS <! #icons &
                                 [ TARGET #target ] !> ] ].

topic-marking-mod-lex := infostr-marking-mod-lex &
  [ SYNSEM.LOCAL.CAT [ MKG tp,
                       HEAD.MOD < [ L-PERIPH luk,
                                    LOCAL [ CAT.HEAD noun,
                                            CONT.HOOK.ICONS-KEY topic ] ] > ] ].

; We treat question particles as complementizers.
; Here is the lexical type for complementizers.

complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comp > ]],
    ARG-ST < #comp &
             [ LOCAL.CAT [ HEAD verb,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

mc_plus_complementizer-lex-item := complementizer-lex-item & 
  [ SYNSEM.LOCAL.CAT.MC +].

mc_minus_complementizer-lex-item := complementizer-lex-item & 
  [ SYNSEM.LOCAL.CAT.MC -].

; Subtypes for kaa and asa
init_plus_complementizer-lex-item := mc_minus_complementizer-lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD [ H-INIT +, 
			    C-INIT - ] ].

init_minus_complementizer-lex-item := mc_minus_complementizer-lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD [H-INIT -,
			   C-INIT + ]].

; Subtype for question particles. Constrains SF to ques.

qpart-lex-item := mc_plus_complementizer-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF ques,
                   CAT [VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite,
			HEAD.H-INIT -]] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

verb_gender_pernum-rule-dtr := word-or-lexrule.
verb_tense_aspect-rule-dtr := word-or-lexrule.


;;; Lexical rule types

Case-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ CASE-FLAG +,
                TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                VERB_GENDER_PERNUM-FLAG #verb_gender_pernum,
                IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense,
                FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
		PLURAL-OBLIQUE-FLAG  #plural_oblique_flag,
                TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection ],
    DTR noun-lex &
        [ INFLECTED [ TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
		      CASE-FLAG -,
		      PLURAL-OBLIQUE-FLAG + & #plural_oblique_flag,
                      PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                      VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                      VERB_GENDER_PERNUM-FLAG #verb_gender_pernum,
                      IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense,
                      FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                      PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                      TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection ] ] ].

case-lex-rule-dtr := word-or-lexrule.

plural-oblique-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ PLURAL-OBLIQUE-FLAG +,
		CASE-FLAG #case_flag,
                TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                VERB_GENDER_PERNUM-FLAG #verb_gender_pernum,
                IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense,
                FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection ],
    DTR noun-lex &
        [ INFLECTED [ TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
		      CASE-FLAG #case_flag,
		      PLURAL-OBLIQUE-FLAG -,
                      PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                      VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                      VERB_GENDER_PERNUM-FLAG #verb_gender_pernum,
                      IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense,
                      FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                      PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                      TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection ] ] ].

plnoun-plural-oblique-lex-rule := plural-oblique-lex-rule-super & infl-lex-rule &
  [ DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM pl ].

sgnoun-plural-oblique-lex-rule := plural-oblique-lex-rule-super & const-lex-rule &
  [ DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM sg ].

oblique_case-lex-rule-super := Case-lex-rule-super.
			     
nom_lexical_rule-lex-rule := Case-lex-rule-super & const-lex-rule &
  [ DTR.SYNSEM.LOCAL.CAT.HEAD.CASE nom,
    SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

acc_dat_pronoun_lexical_rule-lex-rule := Case-lex-rule-super & const-lex-rule &
  [ DTR pronoun_lexeme-noun-lex ].

anim_acc_lexical_rule-lex-rule := oblique_case-lex-rule-super & infl-lex-rule &
  [ DTR anim_noun_lexeme-noun-lex, 
    SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

inanim_acc_lexical_rule-lex-rule := Case-lex-rule-super & const-lex-rule &
  [ DTR inanim_noun_lexeme-noun-lex,
    SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

inanim_definite_acc_lexical_rule-lex-rule := oblique_case-lex-rule-super & infl-lex-rule &
  [ DTR inanim_noun_lexeme-noun-lex,
    SYNSEM.LOCAL [ CAT.HEAD.CASE acc,
		   CONT.HOOK.INDEX.COG-ST uniq+fam+act ]]. 

inst_lexical_rule-lex-rule := oblique_case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE ins ].

dat_lexical_rule-lex-rule := oblique_case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE dat].			       


abl_lexical_rule-lex-rule := oblique_case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE abl ].

poss_m_lexical_rule-lex-rule := oblique_case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE pos ].
;    SYNSEM.LOCAL.CAT.VAL.SPEC.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3sg].

poss_f_lexical_rule-lex-rule := oblique_case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE pos ].

poss_n_lexical_rule-lex-rule := oblique_case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE pos ].

loc_lexical_rule-lex-rule := oblique_case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE loc ].

voc_lexical_rule-lex-rule := oblique_case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE voc ].

erg_lexical_rule-lex-rule := oblique_case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE erg ].

verb_tense_aspect-lex-rule-super := Add-only-no-ccont-rule & verb_gender_pernum-rule-dtr &
  [ INFLECTED [ VERB_TENSE_ASPECT-FLAG +,
                IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense,
                TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                VERB_GENDER_PERNUM-FLAG #verb_gender_pernum,
                TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection,
                CASE-FLAG #case ],
    DTR tobeinflected-verb-super-type &
        [ INFLECTED [ IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense,
                      TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                      VERB_GENDER_PERNUM-FLAG #verb_gender_pernum,
                      TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection,
                      CASE-FLAG #case ] ] ].

present_lexical_rule-lex-rule := verb_tense_aspect-lex-rule-super &  infl-lex-rule &
  [ INFLECTED [ PRESENT_LEXICAL_RULE-FLAG +,
                FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                PAST_LEXICAL_RULE-FLAG #past_lexical_rule ],
    DTR.INFLECTED [ FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                    PAST_LEXICAL_RULE-FLAG #past_lexical_rule ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE present,
    SYNSEM.LOCAL.CAT.HEAD.FORM finite,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom ].

past_lexical_rule-lex-rule := verb_tense_aspect-lex-rule-super &  infl-lex-rule &
  [ INFLECTED [ PAST_LEXICAL_RULE-FLAG +,
                PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule ],
    DTR.INFLECTED [ PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                    FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past].
  ;  SYNSEM.LOCAL.CAT.HEAD.FORM finiteneg ].

future_lexical_rule-lex-rule := verb_tense_aspect-lex-rule-super & const-lex-rule & 
  [ INFLECTED [ FUTURE_LEXICAL_RULE-FLAG +,
                PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                PAST_LEXICAL_RULE-FLAG #past_lexical_rule ],
    DTR.INFLECTED [ PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                    PAST_LEXICAL_RULE-FLAG #past_lexical_rule ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE future].
 ;   SYNSEM.LOCAL.CAT.HEAD.FORM finiteneg ].

;perfective_lexical_rule-lex-rule := verb_tense_aspect-lex-rule-super &
;  [ INFLECTED [ PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
;                PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
;                FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule ],
;    DTR.INFLECTED [ PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
;                    PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
;                    FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule ],
;    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

;imperfective_lexical_rule-lex-rule := verb_tense_aspect-lex-rule-super &
;  [ INFLECTED [ PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
;                PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
;                FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule ],
;    DTR.INFLECTED [ PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
;                    PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
;                   FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule ],
;    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT imperfective ].

infinitive_lexical_rule-lex-rule := verb_tense_aspect-lex-rule-super &  infl-lex-rule &
  [ INFLECTED [ PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule ],
    DTR.INFLECTED [ PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                    PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                    FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule ],
    SYNSEM.LOCAL.CAT.HEAD.FORM infinitive ].

able-perm_lexical_rule-lex-rule := verb_tense_aspect-lex-rule-super &  infl-lex-rule &
  [ INFLECTED [ PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule ],
    DTR.INFLECTED [ PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                    PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                    FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule ],
    SYNSEM.LOCAL.CAT.HEAD.FORM able-perm ].

pres-neg-form_lexical_rule-lex-rule := verb_tense_aspect-lex-rule-super & infl-lex-rule &
  [ INFLECTED [ PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule ],
    DTR.INFLECTED [ PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                    PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                    FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule  ],
    DTR.SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE present,
    SYNSEM.LOCAL.CAT [HEAD.FORM neg-form,
		      VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom ]].

verb_gender_pernum-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ VERB_GENDER_PERNUM-FLAG +,
                TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection,
                TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                CASE-FLAG #case,
                IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense ],
    DTR verb_gender_pernum-rule-dtr &
        [ INFLECTED [ TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection,
                      TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                      PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                      VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                      PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                      FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                      CASE-FLAG #case,
                      IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense ] ] ].

nonfinite_verb_gender_pernum-lex-rule-super := add-only-no-ccont-rule & const-lex-rule
  [ INFLECTED [ VERB_GENDER_PERNUM-FLAG +,
                TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection,
                TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                CASE-FLAG #case,
                IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense ],
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc+dat,
    DTR verb_gender_pernum-rule-dtr &
        [ INFLECTED [ TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection,
                      TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                      PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                      VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                      PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                      FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                      CASE-FLAG #case,
                      IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense ],
	  SYNSEM.LOCAL.CAT.HEAD.FORM nonfinite ]].


past_intrans_verb-lex-rule-super := verb_gender_pernum-lex-rule-super & 
  [ DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

past_non_nom_arg_trans_verb-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR [SYNSEM.LOCAL.CAT.VAL [COMPS cons,
			      COMPS.FIRST.LOCAL.CAT.HEAD.CASE non-nom,
			      SUBJ.FIRST.LOCAL.CAT.HEAD.CASE erg ],
	 INFLECTED.PAST_LEXICAL_RULE-FLAG +]].

past_nom_arg_trans_verb-lex-rule-super := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.SYNSEM.LOCAL.CAT.VAL [COMPS cons,
			      COMPS.FIRST.LOCAL.CAT.HEAD.CASE nom,
			      SUBJ.FIRST.LOCAL.CAT.HEAD.CASE erg ]].

1sgpast_masc_lexical_rule-lex-rule := infl-lex-rule & past_intrans_verb-lex-rule-super  &
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 1SG,
                                                                GEND M ] ].

2sg_past_masc_lexical_rule-lex-rule := infl-lex-rule & past_intrans_verb-lex-rule-super &
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 2SG,
                                                                GEND M ] ].

1sgpast_fem_lexical_rule-lex-rule := infl-lex-rule & past_intrans_verb-lex-rule-super & 
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 1SG,
                                                                GEND F ] ].

3sgpast_masc_lexical_rule-lex-rule := infl-lex-rule & past_intrans_verb-lex-rule-super &
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3SG,
                                                                GEND M ] ].

2sgpast_fem_lexical_rule-lex-rule := infl-lex-rule & past_intrans_verb-lex-rule-super &
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 2SG,
                                                                GEND F ] ].

1pl_past_lexical_rule-lex-rule := infl-lex-rule & past_intrans_verb-lex-rule-super & 
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL ].

3sg_past_fem_lexical_rule-lex-rule := infl-lex-rule & past_intrans_verb-lex-rule-super & 
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3SG,
                                                                GEND F ] ].

3sg_past_neuter_lexical_rule-lex-rule := infl-lex-rule & past_intrans_verb-lex-rule-super & 
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3SG,
                                                                GEND N ] ].

3pl_past_neuter_lexical_rule-lex-rule := infl-lex-rule & past_intrans_verb-lex-rule-super & 
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3PL,
                                                                GEND N ] ].

3pl_past_lexical_rule-lex-rule := infl-lex-rule & past_intrans_verb-lex-rule-super &
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3PL ].

2pl_past_lexical_rule-lex-rule := infl-lex-rule & past_intrans_verb-lex-rule-super &
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ].

erg_sgpast_fem_lexical_rule-lex-rule := past_nom_arg_trans_verb-lex-rule-super &
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM SG,
                                                                GEND F ] ].

erg_sgpast_masc_lexical_rule-lex-rule := past_nom_arg_trans_verb-lex-rule-super &
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM SG,
                                                                GEND M ] ].

erg_sgpast_neuter_lexical_rule-lex-rule := past_nom_arg_trans_verb-lex-rule-super &
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM SG,
                                                                GEND N ] ].
erg_plpast_masc_lexical_rule-lex-rule := past_nom_arg_trans_verb-lex-rule-super &
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM PL,
                                                                GEND M ] ].

erg_plpast_fem_lexical_rule-lex-rule := past_nom_arg_trans_verb-lex-rule-super &
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM PL,
                                                                GEND F ] ].
erg_plpast_neuter_lexical_rule-lex-rule := past_nom_arg_trans_verb-lex-rule-super &
  [ DTR.INFLECTED.PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM PL,
                                                                GEND N ] ].

1sgpresent_masc_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.PRESENT_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND M,
                                                                PERNUM 1SG ] ].

2sgpresent_masc_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.PRESENT_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND M,
                                                                PERNUM 2SG ] ].

1sgpresent_fem_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.PRESENT_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND F,
                                                                PERNUM 1SG ] ].

3sgpresent_masc_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.PRESENT_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND M,
                                                                PERNUM 3SG ] ].

2sgpresent_fem_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.PRESENT_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND F,
                                                                PERNUM 2SG ] ].

3sgpresent_fem_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.PRESENT_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND F,
                                                                PERNUM 3SG ] ].

3sgpresent_neuter_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.PRESENT_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND N,
                                                                PERNUM 3SG ] ].


2pl_future_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.FUTURE_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ].

3pl_future_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.FUTURE_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3PL ].

1sgfuture_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.FUTURE_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1SG ].

2sgfuture_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.FUTURE_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2SG ].

3sg_future_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.FUTURE_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3SG ].

1pl_future_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.FUTURE_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL ].

1plpresent_lexical_rule-lex-rule := infl-lex-rule  & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.PRESENT_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL ].

2plpresent_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.PRESENT_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ].

3plpresent_lexical_rule-lex-rule := infl-lex-rule & verb_gender_pernum-lex-rule-super &
  [ DTR.INFLECTED.PRESENT_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3PL ].

tobe_aux_inflection-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ TOBE_AUX_INFLECTION-FLAG +,
                TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                VERB_GENDER_PERNUM-FLAG #verb_gender_pernum,
                IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense,
                FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                CASE-FLAG #case ],
    DTR tobe_aux_verb_lexeme-aux-lex &
        [ INFLECTED [ TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                      PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                      VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                      VERB_GENDER_PERNUM-FLAG #verb_gender_pernum,
                      IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense,
                      FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                      PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                      CASE-FLAG #case ] ] ].

non3sg_lexical_rule-lex-rule := tobe_aux_inflection-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2nd+3PL ].

to_be_3sg_lexical_rule-lex-rule := tobe_aux_inflection-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3SG ].

tobecome_aux_inflection-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ TOBECOME_AUX_INFLECTION-FLAG +,
                TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection,
                VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                VERB_GENDER_PERNUM-FLAG #verb_gender_pernum,
                PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                CASE-FLAG #case,
                IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense ],
    DTR tobecome_aux_verb_lexeme-aux-lex &
        [ INFLECTED [ TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection,
                      VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                      VERB_GENDER_PERNUM-FLAG #verb_gender_pernum,
                      PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                      PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                      FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                      CASE-FLAG #case,
                      IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense ] ] ].

tobecome_3sg_lexical_rule-lex-rule := tobecome_aux_inflection-lex-rule-super.

irreg_intrans_verb_tense-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb_gender_pernum-rule-dtr &
  [ INFLECTED [ IRREG_INTRANS_VERB_TENSE-FLAG +,
                TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                VERB_GENDER_PERNUM-FLAG #verb_gender_pernum,
                PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                CASE-FLAG #case,
                TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection ],
    DTR irreg_trans_verb1-verb-lex &
        [ INFLECTED [ TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                      PRESENT_LEXICAL_RULE-FLAG #present_lexical_rule,
                      VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                      VERB_GENDER_PERNUM-FLAG #verb_gender_pernum,
                      PAST_LEXICAL_RULE-FLAG #past_lexical_rule,
                      FUTURE_LEXICAL_RULE-FLAG #future_lexical_rule,
                      CASE-FLAG #case,
                      TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection ] ] ].

give_d_present_lexical_rule-lex-rule := irreg_intrans_verb_tense-lex-rule-super.

give_d_past_lexical_rule-lex-rule := irreg_intrans_verb_tense-lex-rule-super.

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.H-INIT -,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.C-INIT + ].

head-comp-phrase := basic-head-1st-comp-phrase & head-initial & 
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.H-INIT +,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT [HEAD +vc & [C-INIT - ]]].

;;;  [ NON-HEAD-DTR [SYNSEM.LOCAL.CAT [HEAD verb,
;;;				    VAL [ SPR < >,
;;;					  COMPS < > ] ] ] ].

subj-head-phrase := decl-head-subj-phrase & head-final &
 [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].
;    ARGS < SYNSEM.LOCAL.CAT.HEAD.CASE nom  > ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

s1-top-coord-rule := basic-s-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 2

s2-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

s2-bottom-coord-rule := unary-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "2",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 3

n3-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

n3-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 3

np3-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

np3-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 3

vp3-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 3

s3-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

s3-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 4

n4-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

n4-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

n4-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

;;; Coordination Strategy 4

np4-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

np4-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

np4-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

;;; Coordination Strategy 4

vp4-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

;;; Coordination Strategy 4

s4-top-coord-rule := basic-s-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

s4-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

s4-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

;;; Adjective Rules, 2014/02/04, AVB, AB

adjective-lex := basic-adjective-lex & intersective-mod-lex &
	      norm-sem-lex-item & attrib-or-pred-lex-item &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT [ HEAD noun,
                                                    VAL.SPR cons ]]>,
			   VAL [ SPR < >,
				 SUBJ < >,
				 COMPS < >,
				 SPEC < > ],
			   POSTHEAD - ]]]].

;;; For adjectives which inflect. e.g. motthaa (big.M) motthii (big.F)
infl-adjective-lex := adjective-lex & [ INFLECTED.ADJECTIVE_INFLECTION-FLAG - ].
;;; Adjectives which do not that inflect. e.g. laal (red)
non-infl-adjective-lex := adjective-lex & [ INFLECTED.ADJECTIVE_INFLECTION-FLAG +].

;;; Adverb Rules, 2014/02/04, AVB, AB

adverb-lex := basic-adverb-lex & intersective-mod-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD.MOD < [ LOCAL.CAT.HEAD verb ]>,
			   VAL [ SPR < >,
				 SUBJ < >,
				 COMPS < >,
				 SPEC < > ],
			   POSTHEAD - ]]]].

adjective_gender_num-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED.ADJECTIVE_INFLECTION-FLAG + ,
    DTR infl-adjective-lex & [ INFLECTED.ADJECTIVE_INFLECTION-FLAG -]] .  	     

masc_sg_adj_lexical_rule-lex-rule := infl-lex-rule & adjective_gender_num-lex-rule-super &
  [ DTR [ SYNSEM.LOCAL.CAT.HEAD.MOD < [LOCAL.CONT.HOOK.INDEX.PNG [GEND M, 
								  PERNUM SG]] > ]].

masc_pl_adj_lexical_rule-lex-rule := infl-lex-rule & adjective_gender_num-lex-rule-super &
  [ DTR [ SYNSEM.LOCAL.CAT.HEAD.MOD < [LOCAL.CONT.HOOK.INDEX.PNG [GEND M, 
								  PERNUM PL]] > ]].

fem_sg_adj_lexical_rule-lex-rule := infl-lex-rule & adjective_gender_num-lex-rule-super &
  [ DTR [ SYNSEM.LOCAL.CAT.HEAD.MOD < [LOCAL.CONT.HOOK.INDEX.PNG [GEND F, 
								  PERNUM SG]] > ]].

fem_pl_adj_lexical_rule-lex-rule := infl-lex-rule & adjective_gender_num-lex-rule-super &
  [ DTR [ SYNSEM.LOCAL.CAT.HEAD.MOD < [LOCAL.CONT.HOOK.INDEX.PNG [GEND F, 
								  PERNUM PL]] > ]].

neut_sg_adj_lexical_rule-lex-rule := infl-lex-rule & adjective_gender_num-lex-rule-super &
  [ DTR [ SYNSEM.LOCAL.CAT.HEAD.MOD < [LOCAL.CONT.HOOK.INDEX.PNG [GEND N, 
								  PERNUM SG]] > ]].

neut_pl_adj_lexical_rule-lex-rule := infl-lex-rule & adjective_gender_num-lex-rule-super &
  [ DTR [ SYNSEM.LOCAL.CAT.HEAD.MOD < [LOCAL.CONT.HOOK.INDEX.PNG [GEND N, 
								  PERNUM PL]] > ]].

;;; Locative postpositions, such as "here" and "there" 
