;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Marathi
;;; created at:
;;;     Fri Jan 31 20:08:37 UTC 2014
;;; based on Matrix customization system version of:
;;;     Fri Jan 31 10:06:37 UTC 2014
;;;
;;; Marathi by Rajeshwari Pandharipande and Native Speaker (Author)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

head :+ [ AUX bool,
    FORM form ].

inflected :+ [ CASE-FLAG luk,
    IRREG_INTRANS_VERB_TENSE-FLAG luk,
    FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG luk,
    TOBECOME_AUX_INFLECTION-FLAG luk,
    VERB_TENSE_ASPECT-FLAG luk,
    TOBE_AUX_INFLECTION-FLAG luk ].

infl-satisfied :+ [ CASE-FLAG na-or-+,
    IRREG_INTRANS_VERB_TENSE-FLAG na-or-+,
    FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG na-or-+,
    TOBECOME_AUX_INFLECTION-FLAG na-or-+,
    VERB_TENSE_ASPECT-FLAG na-or-+,
    TOBE_AUX_INFLECTION-FLAG na-or-+ ].

png :+ [ PERNUM pernum,
    GEND gender ].

basic-head-comp-phrase :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nom
erg := case.  ; erg
abs := case.  ; abs
ins := case.  ; inst
abl := case.  ; abl
pos := case.  ; poss
loc := case.  ; loc
voc := case.  ; voc
acc+dat := case.
acc := acc+dat.
dat := acc+dat.

;;; Pernum

pernum := *top*.
SG := pernum.
PL := pernum.
1st := pernum.
3rd := pernum.
1SG := 1st & SG.
2SG := 2nd & SG.
3SG := 3rd & SG.
1PL := 1st & PL.
1PL_incl := 1PL.
1PL_excl := 1PL.
2PL := 2nd & PL.
3PL := 3rd & PL & 2nd+3PL.
2nd+3PL := pernum.
2nd := 2nd+3PL.

;;; Gender

gender := *top*.
M := gender.
F := gender.
N := gender.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; Tense

past := tense.
present := tense.
future := tense.

;;; Aspect

perfective := aspect.
imperfective := aspect.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns

noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < #spr &
                                 [ LOCAL.CAT.HEAD det ] >,
                           COMPS < >,
                           SUBJ < >,
                           SPEC < > ],
    ARG-ST < #spr >,
    INFLECTED.CASE-FLAG - ].

no-spr-noun-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; Nouns which cannot take specifiers mark their SPR requirement
; as OPT +.  Making the non-head daughter OPT - in this rule
; keeps such nouns out.
; 
; Rules for building NPs.  Note that the Matrix uses SPR for
; the specifier of nouns and SUBJ for the subject (specifier) of verbs.

head-spec-phrase := basic-head-spec-phrase & head-final &
  [ NON-HEAD-DTR.SYNSEM.OPT - ].

common_noun_lexeme-noun-lex := noun-lex.

pronoun_lexeme-noun-lex := no-spr-noun-lex.

1st_pronoun_lexeme-noun-lex := pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1SG ].

1pl_pronoun_lexeme-noun-lex := pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL ].

1plincl_pronoun_lexeme-noun-lex := pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL_incl ].

2sg_pronoun_lexeme-noun-lex := pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2SG ].

2pl_pronoun_lexeme-noun-lex := pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ].

2plh_pronoun_lexeme-noun-lex := pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ].

3sgm_pronoun_lexeme-noun-lex := pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ GEND M,
                                       PERNUM 3SG ] ].

3sgf_pronoun_lexeme-noun-lex := pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3SG,
                                       GEND F ] ].

3plm_pronoun_lexeme-noun-lex := pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3PL,
                                       GEND M ] ].

3plf_pronoun_lexeme-noun-lex := pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3PL,
                                       GEND F ] ].

3sgn_pronoun_lexeme-noun-lex := pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3SG,
                                       GEND N ] ].

3pln_pronoun_lexeme-noun-lex := pronoun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG [ PERNUM 3PL,
                                       GEND N ] ].

malenounsg_lexeme-noun-lex := common_noun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND M ].

femalenounsg_lexeme-noun-lex := common_noun_lexeme-noun-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.PNG.GEND F ].

male_proper_noun_lexeme-noun-lex := pronoun_lexeme-noun-lex.

female_proper_noun_lexeme-noun-lex := pronoun_lexeme-noun-lex.

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

main-verb-lex := verb-lex & basic-verb-lex & verb_gender_future-rule-dtr & verb_gender_past-rule-dtr & verb_gender_present-rule-dtr & verb_tense_aspect-rule-dtr &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.AUX + ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun,
    INFLECTED.VERB_TENSE_ASPECT-FLAG - ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] >,
    INFLECTED.VERB_TENSE_ASPECT-FLAG - ].

trans_verb_lxm-verb-lex := transitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom,
                           COMPS.FIRST.LOCAL.CAT.HEAD.CASE acc+dat ] ].

intrans_verb_lxm-verb-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CAT.HEAD.CASE nom ].

irreg_trans_verb1-verb-lex := trans_verb_lxm-verb-lex &
  [ INFLECTED.IRREG_INTRANS_VERB_TENSE-FLAG - ].

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun,
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < [ ] >,
                                 COMPS < >,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb &
                                [ AUX - ] ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

neg-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ].

tobe_aux_verb_lexeme-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite,
    INFLECTED.TOBE_AUX_INFLECTION-FLAG - ].

tobecome_aux_verb_lexeme-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite,
    INFLECTED.TOBECOME_AUX_INFLECTION-FLAG - ].

;;; Others

;;; Determiners
;;; SPEC is non-empty, and already specified by basic-determiner-lex.

determiner-lex := basic-determiner-lex & basic-zero-arg & non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           COMPS < >,
                           SUBJ < > ] ].

determiner_lxm-determiner-lex := determiner-lex & no-icons-lex-item.

infostr-marking-mod-lex := no-rels-hcons-lex-item & one-icons-lex-item &
  [ SYNSEM.LOCAL [ CAT [ HEAD adv &
                              [ MOD < [ LIGHT -,
                                        LOCAL.CONT.HOOK [ INDEX #target,
                                                          ICONS-KEY #icons ] ] > ],
                         VAL [ SUBJ < >,
                               COMPS < >,
                               SPR < >,
                               SPEC < > ] ],
                   CONT.ICONS <! #icons &
                                 [ TARGET #target ] !> ] ].

topic-marking-mod-lex := infostr-marking-mod-lex &
  [ SYNSEM.LOCAL.CAT [ MKG tp,
                       HEAD.MOD < [ L-PERIPH luk,
                                    LOCAL [ CAT.HEAD noun,
                                            CONT.HOOK.ICONS-KEY topic ] ] > ] ].

; We treat question particles as complementizers.
; Here is the lexical type for complementizers.

complementizer-lex-item := raise-sem-lex-item & basic-one-arg &
  [ SYNSEM.LOCAL.CAT [ HEAD comp &
                            [ MOD < > ],
                       VAL [ SPR < >,
                             SUBJ < >,
                             COMPS < #comp > ] ],
    ARG-ST < #comp &
             [ LOCAL.CAT [ MC +,
                           HEAD verb,
                           VAL [ SUBJ < >,
                                 COMPS < > ] ] ] > ].

; Subtype for question particles. Constrains SF to ques.

qpart-lex-item := complementizer-lex-item &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX.SF ques,
                   CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM finite ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

verb_gender_future-rule-dtr := word-or-lexrule.
verb_gender_past-rule-dtr := word-or-lexrule.
verb_gender_present-rule-dtr := word-or-lexrule.
verb_tense_aspect-rule-dtr := word-or-lexrule.

;;; Lexical rule types

Case-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED [ CASE-FLAG +,
                FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
                IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense,
                VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection ],
    DTR noun-lex &
        [ INFLECTED [ FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
                      IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense,
                      VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                      TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                      TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection ] ] ].

nom_lexical_rule-lex-rule := Case-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE nom ].

acc_lexical_rule-lex-rule := Case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE acc ].

inst_lexical_rule-lex-rule := Case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE ins ].

dat_lexical_rule-lex-rule := Case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE dat ].

abl_lexical_rule-lex-rule := Case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE abl ].

poss_m_lexical_rule-lex-rule := Case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE pos ].

poss_f_lexical_rule-lex-rule := Case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE pos ].

poss_n_lexical_rule-lex-rule := Case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE pos ].

loc_lexical_rule-lex-rule := Case-lex-rule-super & const-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE loc ].

voc_lexical_rule-lex-rule := Case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE voc ].

erg_lexical_rule-lex-rule := Case-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD.CASE erg ].

verb_tense_aspect-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ VERB_TENSE_ASPECT-FLAG +,
                TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection,
                CASE-FLAG #case,
                TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense ],
    DTR verb_tense_aspect-rule-dtr &
        [ INFLECTED [ TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection,
                      CASE-FLAG #case,
                      TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                      IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense ] ] ].

past_lexical_rule-lex-rule := verb_gender_past-rule-dtr & verb_tense_aspect-lex-rule-super &
  [ INFLECTED.FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

future_lexical_rule-lex-rule := verb_gender_future-rule-dtr & verb_tense_aspect-lex-rule-super &
  [ INFLECTED.FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE future ].

present_lexical_rule-lex-rule := verb_gender_present-rule-dtr & verb_tense_aspect-lex-rule-super &
  [ INFLECTED.FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
    DTR.INFLECTED.FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE present ].

perfective_lexical_rule-lex-rule := verb_tense_aspect-lex-rule-super &
  [ INFLECTED.FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
    DTR.INFLECTED.FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT perfective ].

imperfective_lexical_rule-lex-rule := verb_tense_aspect-lex-rule-super &
  [ INFLECTED.FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
    DTR.INFLECTED.FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT imperfective ].

infinitive_lexical_rule-lex-rule := verb_tense_aspect-lex-rule-super &
  [ INFLECTED.FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
    DTR.INFLECTED.FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
    SYNSEM.LOCAL.CAT.HEAD.FORM nonfinite ].

verb_gender_present-lex-rule-super := add-only-no-ccont-rule &
  [ INFLECTED #infl,
    DTR verb_gender_present-rule-dtr &
        [ INFLECTED #infl ] ].

1sgpresent_fem_lexical_rule-lex-rule := infl-lex-rule & verb_gender_present-lex-rule-super &
  [ DTR.INFLECTED.FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG na,
    SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND F,
                                                                PERNUM 1SG ] ].

1sgpresent_masc_lexical_rule-lex-rule := infl-lex-rule & verb_gender_present-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND M,
                                                                PERNUM 1SG ] ].

2sgpresent_masc_lexical_rule-lex-rule := infl-lex-rule & verb_gender_present-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND M,
                                                                PERNUM 2SG ] ].

2sgpresent_fem_lexical_rule-lex-rule := infl-lex-rule & verb_gender_present-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND F,
                                                                PERNUM 2SG ] ].

3sgpresent_masc_lexical_rule-lex-rule := infl-lex-rule & verb_gender_present-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND M,
                                                                PERNUM 3SG ] ].

3sgpresent_fem_lexical_rule-lex-rule := infl-lex-rule & verb_gender_present-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND F,
                                                                PERNUM 3SG ] ].

1plpresent_lexical_rule-lex-rule := const-lex-rule & verb_gender_present-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL ].

2plpresent_lexical_rule-lex-rule := infl-lex-rule & verb_gender_present-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ].

3plpresent_lexical_rule-lex-rule := infl-lex-rule & verb_gender_present-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3PL ].

verb_gender_past-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb_gender_past-rule-dtr &
        [ INFLECTED #infl ] ].

1sgpast_masc_lexical_rule-lex-rule := verb_gender_past-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND M,
                                                                PERNUM 1SG ] ].

1sgpast_fem_lexical_rule-lex-rule := verb_gender_past-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND M,
                                                                PERNUM 1SG ] ].

2sgpast_masc_lexical_rule-lex-rule := verb_gender_past-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND M,
                                                                PERNUM 2SG ] ].

2sgpast_fem_lexical_rule-lex-rule := verb_gender_past-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND F,
                                                                PERNUM 2SG ] ].

3sgpast_masc_lexical_rule-lex-rule := verb_gender_past-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND M,
                                                                PERNUM 3SG ] ].

3sgpast_fem_lexical_rule-lex-rule := verb_gender_past-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ GEND F,
                                                                PERNUM 3SG ] ].

1plpast_lexical_rule-lex-rule := verb_gender_past-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL ].

2plpast_lexical_rule-lex-rule := verb_gender_past-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ].

3plpast_lexical_rule-lex-rule := verb_gender_past-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3PL ].

verb_gender_future-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR verb_gender_future-rule-dtr &
        [ INFLECTED #infl ] ].

1sgfuture_lexical_rule-lex-rule := verb_gender_future-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1SG ].

2psgfuture_lexical_rule-lex-rule := verb_gender_future-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2SG ].

3sgfuture_lexical_rule-lex-rule := verb_gender_future-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3SG ].

1plfuture_lexical_rule-lex-rule := verb_gender_future-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 1PL ].

2plfuture_lexical_rule-lex-rule := verb_gender_future-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2PL ].

3plfuture_lexical_rule-lex-rule := verb_gender_future-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3PL ].

tobe_aux_inflection-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ TOBE_AUX_INFLECTION-FLAG +,
                FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
                CASE-FLAG #case,
                VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense ],
    DTR tobe_aux_verb_lexeme-aux-lex &
        [ INFLECTED [ FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
                      CASE-FLAG #case,
                      VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                      TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                      IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense ] ] ].

non3sg_lexical_rule-lex-rule := tobe_aux_inflection-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 2nd+3PL ].

to_be_3sg_lexical_rule-lex-rule := tobe_aux_inflection-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PERNUM 3SG ].

tobecome_aux_inflection-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED [ TOBECOME_AUX_INFLECTION-FLAG +,
                FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
                CASE-FLAG #case,
                TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection,
                VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense ],
    DTR tobecome_aux_verb_lexeme-aux-lex &
        [ INFLECTED [ FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
                      CASE-FLAG #case,
                      TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection,
                      VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                      IRREG_INTRANS_VERB_TENSE-FLAG #irreg_intrans_verb_tense ] ] ].

tobecome_3sg_lexical_rule-lex-rule := tobecome_aux_inflection-lex-rule-super.

irreg_intrans_verb_tense-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule & verb_gender_future-rule-dtr & verb_gender_past-rule-dtr & verb_gender_present-rule-dtr &
  [ INFLECTED [ IRREG_INTRANS_VERB_TENSE-FLAG +,
                FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
                CASE-FLAG #case,
                VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection ],
    DTR irreg_trans_verb1-verb-lex &
        [ INFLECTED [ FUTURE_LEXICAL_RULE-OR-PAST_LEXICAL_RULE-FLAG #future_lexical_rule-or-past_lexical_rule,
                      CASE-FLAG #case,
                      VERB_TENSE_ASPECT-FLAG #verb_tense_aspect,
                      TOBECOME_AUX_INFLECTION-FLAG #tobecome_aux_inflection,
                      TOBE_AUX_INFLECTION-FLAG #tobe_aux_inflection ] ] ].

give_d_present_lexical_rule-lex-rule := irreg_intrans_verb_tense-lex-rule-super.

give_d_past_lexical_rule-lex-rule := irreg_intrans_verb_tense-lex-rule-super.

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

comp-head-phrase := basic-head-1st-comp-phrase & head-final.

subj-head-phrase := decl-head-subj-phrase & head-final &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

vp1-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

vp1-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 1

s1-top-coord-rule := basic-s-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

s1-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 2

s2-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

s2-bottom-coord-rule := unary-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "2",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 3

n3-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

n3-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 3

np3-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

np3-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 3

vp3-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 3

s3-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

s3-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 4

n4-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

n4-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

n4-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

;;; Coordination Strategy 4

np4-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

np4-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

np4-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

;;; Coordination Strategy 4

vp4-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

;;; Coordination Strategy 4

s4-top-coord-rule := basic-s-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

s4-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

s4-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].
